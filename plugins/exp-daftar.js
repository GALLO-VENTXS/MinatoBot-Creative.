import { createHash } from 'crypto'
const {
    proto,
    generateWAMessageFromContent,
    prepareWAMessageMedia
  } = (await import('@adiwajshing/baileys')).default

var link_img = `https://i.ibb.co/tzXBBX9/file.jpg`

let Reg = /\|?(.*)([.|] *?)([0-9]*)$/i
let handler = async function (m, { text, usedPrefix }) {
  let user = global.db.data.users[m.sender]
    let nombre = conn.getName(m.sender)
    let bbbkeni = `.reg ${nombre}.18`
        let buttonMessage = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
            message: {
                interactiveMessage: proto.Message.InteractiveMessage.create({
                    body: { text: `‚úß Formato incorrecto\n*${usedPrefix}reg Nombre.Edad*` },
                    nativeFlowMessage: {
                        buttons: [{
                      name: "quick_reply",
                      buttonParamsJson: "{\"display_text\":\"Registro Automatico\",\"id\":\""+bbbkeni+"\"}"
              },],
                    }
                })
            }
        }
    }, { quoted: global.ftoko });
  if (user.registered === true) throw m.reply(`‚úß Usted ya esta registradx\nQuiere salir del registro? ${usedPrefix}unreg <NUMERO DE SERIE>`)
  if (!Reg.test(text)) throw conn.relayMessage(m.chat, buttonMessage.message, {});
//  if (!Reg.test(text)) throw m.reply(`ñ£ê Formato incorrecto\n*${usedPrefix}reg Nombre.Edad*`)
  let [_, name, splitter, age] = text.match(Reg)
  if (!name) throw m.reply('ñ£ê Solo puedes poner letras en tu nombre')
  if (!age) throw m.reply('ñ£ê Solo puedes poner numeros en tu edad')
  age = parseInt(age)
  if (age > 120) throw m.reply('ñ£ê Usted es demasiado viejo')
  if (age < 16) throw m.reply('ñ£ê Usted es demasiado menor')
  user.name = name.trim()
  user.age = age
  user.regTime = + new Date
  user.registered = true
  let sn = createHash('md5').update(m.sender).digest('hex')
  let txt_reg = `
`+"*`REGISTRO COMPLETO`*\n"+`

‚ï≠‚îÄ„Äå Info „Äç
‚îÇ *ñ£ê Nombre:* ${name}
‚îÇ *ñ£ê Edad:* ${age} A√±os 
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ
${readMore}
*ñ£ê Numero de serie:*
${sn}

**T√©rminos de servicio (TOS) - M≈Ç‚Ç¶Œª≈¶√ò ‚Ç°≈òEŒª≈¶≈ÇVE**
Al utilizar Minato Creative ES, usted acepta los siguientes t√©rminos:

1. *EST√Å ESTRICTAMENTE PROHIBIDO CAMBIAR EL TEMPORIZADOR/MENSAJE TEMPORAL*
El bot bloquear√° autom√°ticamente su n√∫mero, para desbanear informe al propietario (+${global.nomorown}).

2. *NO ENV√çO DE MEDIOS NSFW*
El bot detectar√° autom√°ticamente los medios y prohibir√° su n√∫mero, para desbabear, informe al propietario (+${global.nomorown}).

3. *EL SPAM DE N√öMEROS DE BOT EST√Å PROHIBIDO*
El bot bloquear√° permanentemente su n√∫mero si hay una indicaci√≥n de spam en su n√∫mero.

4. *PROPIETARIO DEL CHAT SI ES NECESARIO*
No tiene sentido chatear con el n√∫mero de bot, porque el n√∫mero de bot se almacena en el servidor y el propietario no ver√° su chat.

Al utilizar Minato Creative, usted acepta todos los t√©rminos aplicables.

*Estos t√©rminos se actualizaron por √∫ltima vez el 12 de mayo de 2024.*

Registrarse significa aceptar los t√©rminos
`
           let txt_body = txt_reg
            let txt_footer = wm
            let txt_title = `ñ£ê MINATO CREATIVE THE BEST BOT WHATSAPP ñ£ê`
            let txt_subtitle = ``
            let creador = `By GALLO-VENTXS (no borrar creditos)`
            let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: txt_body
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: txt_footer
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : { url: link_img }}, { upload: conn.waUploadToServer})), 
                  title: txt_title,
                  gifPlayback: false,
                  subtitle: txt_subtitle,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
             {                
  "name": "single_select",
"buttonParamsJson": 
`{
  "title": "ñ£ê CLICK AQUI ñ£ê",
  "sections": [
    {
      "title": "ñ£ê Minato Creative",
      "rows": [
        
        {
          "header": "Ping",
          "title": "click para mostrar.",
          "description": "Velocidad e informaci√≥n sobre el bot.",
          "id": ".ping"
        },
        {
          "header": "Owner",
          "title": "click para mostrar",
          "description": "Numero del owner y su informaci√≥n.",
          "id": ".owner"
        }
      ]
    }
  ]
}`

              },                         
              {
                      name: "cta_url",
                      buttonParamsJson: `{"display_text":"Canal","url":"https://whatsapp.com/channel/0029VarflA19RZARXpfQhp1X","merchant_url":"https://whatsapp.com/channel/0029VarflA19RZARXpfQhp1X"}`
              },
              {
                      name: "quick_reply",
                      buttonParamsJson: "{\"display_text\":\"Menu\",\"id\":\".menu\"}"
              },
              {
                "name": "cta_copy",
                "buttonParamsJson": JSON.stringify({
                "display_text": `Copiar Numero De Serie`,
                "copy_code": `${sn}`
                })
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 100,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363346794689649@newsletter',
                  newsletterName: 'ñ£ê GALLO CREATIVE ñ£ê',
                  serverMessageId: 100
                }
                }
        })
    }
  }
}, { quoted: m })

/*await conn.relayMessage(msg.key.remoteJid, msg.message, { messageId: msg.key.id})*/
m.reply(txt_reg)
}

handler.help = ['verificar', 'registrar'].map(v => v + ' <nombre>.<edad>')

handler.command = /^(verificar|reg(istrar)?)$/i

export default handler